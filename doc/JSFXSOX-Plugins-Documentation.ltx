\documentclass[titlepage,twoside,12pt,a4paper]{article}
  \usepackage[utf8]{inputenc}
  \usepackage[T1]{fontenc}

  \usepackage{amssymb}         % ==> for N
  \usepackage{caption}         % ==> captionof
  \usepackage[usenames]{color} % ==> color
  \usepackage{colortbl}        % ==> cellcolor
  \usepackage{enumitem}        % ==> ttDescription
  \usepackage{fancyhdr}        % ==> fancyhead
  \usepackage{graphicx}        % ==> includegraphics

  %-----------------------
  %-- HEADERS / FOOTERS --
  %-----------------------

  \pagestyle{fancy}
  %--
  \fancyhead[LE]{\slshape \rightmark}
  \fancyhead[CE]{~}
  \fancyhead[RE]{~}
  \fancyhead[LO]{~}
  \fancyhead[CO]{~}
  \fancyhead[RO]{\slshape \leftmark}
  %--
  \fancyfoot[LE]{\thepage}
  \fancyfoot[CE]{~}
  \fancyfoot[RE]{Dr.~Thomas Tensi}
  \fancyfoot[LO]{JSFX SOX Effect Plugins}
  \fancyfoot[CO]{~}
  \fancyfoot[RO]{\thepage}

  %---------------------------------
  %-- PAGE SIZE AND OTHER LENGTHS --
  %---------------------------------

  \renewcommand{\headrulewidth}{0.4pt}
  \renewcommand{\footrulewidth}{0.4pt}
  %\addtolength{\headheight}{\baselineskip}
  \addtolength{\voffset}{-5mm}
  \setlength{\topmargin}{0mm}
  \addtolength{\headsep}{-5mm}
  \addtolength{\textheight}{20mm}
  \setlength{\parindent}{0pt}
  \setlength{\parskip}{5pt}

  \bibliographystyle{plain}
 
  %-------------------
  %-- MISC COMMANDS --
  %-------------------

  \newcommand{\bsl}{\textbackslash}

  \newcommand{\centeredExternalPicture}[2]{%
      \begin{center}
          \externalPicture{#1}{#2}%
      \end{center}
  }

  \newenvironment{centeredFigure}%
	         {\begin{figure}[tb]\begin{center}}%
	         {\end{center}\end{figure}}

  \newenvironment{centeredFigureHere}%
	         {\begin{figure}[h]\begin{center}}%
	         {\end{center}\end{figure}}

  \newcommand{\degrees}[1]{\(#1^{\circ}\)}
                 
  \newcommand{\embeddedCode}[1]{\textsf{#1}}

  \newcommand{\externalPicture}[2]{%
      \includegraphics[scale=#1]{figures/#2}%
  }

  \newcommand{\hyperlink}[1]{\textsf{\color{blue}#1}}

  \definecolor{parameterTableHeadingBkgnd}{RGB}{200,200,200}
  \definecolor{parameterTableOtherBkgnd}{RGB}{230,230,230}

  \newenvironment{parameterTable}
                 {\begin{center}\scriptsize
                    \begin{tabular}{|p{3cm}|p{6cm}|p{3cm}|}
                      \hline \parameterTableHeader \hline
                 }
                 {  \end{tabular}
                  \end{center}}

  \newcommand{\parameterTableHeader}{%
    \cellcolor{parameterTableHeadingBkgnd}\bf Parameter&
    \cellcolor{parameterTableHeadingBkgnd}\bf Description&
    \cellcolor{parameterTableHeadingBkgnd}\bf Unit\\
  }

  \newcommand{\parameterTableLine}[3]{#1&#2&#3\\\hline}

  \definecolor{restrictionFgnd}{RGB}{128,0,0}
  \definecolor{restrictionBkgnd}{RGB}{250,250,192}

  \renewcommand{\restriction}[1]{%
    \begin{tabular}{lp{10cm}}%
      \colorbox{restrictionBkgnd}%
               {\color{restrictionFgnd}Restriction:}&#1\\
    \end{tabular}\\}

  \newcommand{\soxPanel}[1]{%
    \begin{minipage}{\linewidth}
      \centeredExternalPicture{0.9}{SOX-#1.png}
      \vspace*{-5mm}
      \captionof{figure}{JSFX Panel for SOX #1}
    \end{minipage}
  }

  \newcommand{\TODO}[1]{\emph{\color{red}\textbf{TODO:} #1}}

  \newenvironment{ttDescription}%
	         {\begin{description}[%
                       style=nextline, labelwidth=0pt,
                       itemindent=\dimexpr-5mm, leftmargin=1cm%
                 ]}
	         {\end{description}}

  %-------------------
  %-- ABBREVIATIONS --
  %-------------------

  \newcommand{\JSFXSOX}{JSFX-SOX}
  \newcommand{\N}{\mathbb{N}_0}

  \setcounter{secnumdepth}{3}
  \setcounter{tocdepth}{3}

%############################################################
\begin{document}

\title{JSFX SOX Plugins for the Reaper DAW}
\author{Dr.~Thomas Tensi}
\date{\today}
\maketitle

\tableofcontents
\clearpage

%=====================
\section{Introduction}
%=====================

%--------------------
\subsection{Overview}
%--------------------

The \JSFXSOX\ software package provides JSFX (Jesusonic) plugins for
being used in the Reaper DAW~\cite{reference:reaper}; they implement
some of the audio processing effects from SOX.  It is also possible to
use them in any VST compatible DAW using the freely available ReaJS
VST plugin~\cite{reference:reaplugs} that is able to interpret JSFX
files.

SOX (\cite{reference:soxDocumentation}) is a command line audio
processing tool for Unix, Windows and Mac OS that transforms source
audio files in several formats into other audio files.  It provides
several standard audio effects (like e.g. filters or reverb) in good
quality and with a transparent, open-source implementation.

The effects provided here are a complete rewrite of the sox algorithms
for producing \emph{(bit-exact) identical} renderings in the DAW.
This can easily be checked by rendering some audio externally via SOX
and internally with the plugins and subtracting the results.  Apart
from roundoff errors (SOX often uses 32bit integer processing, while
JSFX always uses double floating point processing) the results cancel
out with typically a residual noise of less than -120dBFS.

The main motivation for this package is to be able to play around with
effects in Reaper and be sure that an external rendering by sox will
produce exactly the same results.  Although sox does not always
provide the "best" effects, it still is a reliable and well-defined
audio tool.

Because sox very often uses rich command line options for its effects,
not every effect configuration from sox can be transported into the
slider oriented GUI for JSFX.  E.g. the compander of sox allows the
definition of a transfer function having multiple segments.  Although
the internal engine of the JSFX compander implements exactly the same
internal segment logic, the user interface only allows the typical
definition of a threshold and a compression ratio (with three
segments).

\textbf{Note also that a spiffy user interface is \emph{not at all} a
        priority for this package.}

The sox effects have been rewritten and restructured for easier
maintenance, because in the original source there is some redundancy
and unnecessary complexity due to its several contributors.
Nevertheless the effects provided here faithfully model the SOX
processing.

%-----------------------------
\subsection{Available Effects}
%-----------------------------

The following effects are supported:

\begin{ttDescription}
  \item[allpass:] a biquad allpass filter two-poled with filter
    frequency and the filter bandwith (in several units)

  \item[band:] a biquad bandpass filter with center filter frequency
    and the filter bandwith (in several units) and an option for
    unpitched audio

  \item[bandpass/bandreject:] a biquad filter for bandpass or
    bandreject with center filter frequency and the filter bandwith
    (in several units)

  \item[bass/treble:] a biquad filter for boosting or cutting bass or
    treble with a shelving characteristics with settings for filter
    frequency and the filter bandwith (in several units)

  \item[biquad:] a generic biquad (iir) filter with 6 coefficients b0,
    b1, b2, a0, a1 and a2

  \item[compand:] a compander with attack, decay, input gain shift,
    threshold and compression and soft knee; this is a reduced version
    of SOX compand with only a simple transfer function and a combined
    attack/decay setting

  \item[equalizer:] a biquad filter for equalizing with settings for
    the pole count, the filter frequency and the filter bandwith (in
    several units)

  \item[gain:] a volume changer by \emph{exact} decibels\dots

  \item[lowpass/highpass:] a biquad filter for either lowpass or
    highpass with settings for the pole count, the filter frequency
    and the filter bandwith (in several units)

  \item[mcompand:] a multiband compander with a Linkwitz-Riley
    crossover filter and for each band a compander with attack, decay,
    input gain shift, threshold and compression and soft knee; again
    the companders only allow a simple transfer function and a
    combined attack/decay setting

  \item[overdrive:] a simple tanh distortion with gain and colour
    specification

  \item[phaser:] a phaser effect with sine or triangle modulation

  \item[reverb:] a reverb effect (based on Freeverb) with several
    parameters for the room (like size and HF damping) as well as a
    possible predelay

  \item[tremolo:] a tremolo effect with sine modulation using a
    double-sideband suppressed carrier modulation
\end{ttDescription}

%==============================================
\section{Installation of the \JSFXSOX\ Effects}
%==============================================

The installation in Windows is as follows:
\begin{enumerate}

   \item Load the \JSFXSOX\ files from the repository in
     \cite{reference:jsfxSoxRepository}.
  
   \item Close the Reaper application or your other DAW using ReaJS
     (if open).

   \item Make a subdirectory \embeddedCode{Dr\_TT} in either the
     \embeddedCode{Effects} directory of the Reaper installation
     (typically in \embeddedCode{\bsl Program Files\bsl Reaper\bsl
      Effects}) or ---~if your DAW uses some different directory for
     JSFX files~--- in that directory.

   \item Copy over all \embeddedCode{*.jsfx} and
     \embeddedCode{*.jsfx-inc} files from the distribution into this
     directory.  If helpful, also add the documentation from the root
     directory.

   \item If helpful, also copy the test files from \embeddedCode{test}
     to the effects sub-directory \embeddedCode{Dr\_TT\bsl Test} (see
     section~\ref{section:regressionTest}).

   \item Restart Reaper (or your other DAW).  You should now be able
     to select the plugins from the JSFX folder (they are all prefixed
     with "SOX").

\end{enumerate}

%===============================================
\section{Description of the Effects in \JSFXSOX}
%===============================================

%---------------------------
\subsection{General Remarks}
%---------------------------

As mentioned in the introduction this package provides several audio
tools written in JSFX for emulating SOX bit-exactly.

This goal is reached up to a certain precision (of about -120dBFS),
because SOX often uses 32bit integer processing while \JSFXSOX\ uses
64bit float processing.

Where noted in the following description, some simplifications have
been done to take care of the limited user interface and also some
parameters were omitted.
    
Note again that the focus of this toolset is the faithful
reimplementation and somehow a redesign of SOX; a spiffy user
interface is \emph{not at all} a priority in this project.

For the same reasons none of the effects of \JSFXSOX\ displays
anything; they just process audio parametrized by their slider
settings.

Nevertheless for debugging purposes, some textual display is supported
via keypresses in the effects window as follows:

\begin{itemize}
  \item Internal effect data can be displayed by pressing ``d''(ata).
  \item The table of allocated strings is shown via key ``s''(trings).
  \item The local memory is displayed via ``m''(emory)
    (see figure~\ref{figure:memoryViewer}).
  \item All those displays scale automatically and are scrollable via
    ``+'' and ``-'' and reset via ``0''.
  \item The display of the effect (if any) is shown via ``e''(ffect)
    which is the default (and ---~as mentioned before~--- empty).
\end{itemize}

\begin{centeredFigure}
  \centeredExternalPicture{0.75}{memoryViewer.png}
  \caption{Memory View for \JSFXSOX\ Effects in Reaper}
  \label{figure:memoryViewer}
\end{centeredFigure}

All effects of \JSFXSOX\ are discussed in alphabetical order in the
following chapter.  Note that the effects description is mostly taken
from the SOX documentation~\cite{reference:soxDocumentation} except
for specifics in the \JSFXSOX\ effects.

%------------------------------
\subsection{SOX Allpass Filter}
%------------------------------

\soxPanel{Allpass}
\begin{parameterTable}
  \parameterTableLine{frequency}
                     {the center frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth}
\end{parameterTable}

This effect is a two-pole all-pass filter with
\embeddedCode{frequency} as center frequency and filter-width
\embeddedCode{bandWidth} with unit \embeddedCode{bandwidthKind}.  The
bandwidth kinds are a relative \textit{frequency}, a specification of
\textit{octaves}, the filter \textit{quality} or the
\textit{butterworth} quality (with fixed quality \(q=\sqrt{2}/2\)).

An all-pass filter changes the audio's frequency-to-phase relationship
without changing its frequency-to-amplitude relationship.  The
detailed filter description can be found in
\cite{reference:filter-cookbook}.

%---------------------------
\subsection{SOX Band Filter}
%---------------------------

\soxPanel{Band}
\begin{parameterTable}
  \parameterTableLine{usesUnpitchedAudio}
                     {flag to tell whether special processing
                      for unpitched audio is applied}
                     {Boolean}
  \parameterTableLine{frequency}
                     {the center frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth}
\end{parameterTable}

This effect is a band-pass filter.  The frequency response drops
logarithmically around \embeddedCode{frequency}, the
\embeddedCode{bandWidth} and \embeddedCode{bandwidthKind} parameters
gives the slope of the drop; frequencies at \textit{frequency+width}
and \textit{frequency-width} will be half of their original
amplitudes. The effect defaults to a mode that is oriented to pitched
audio, i.e. voice, singing, or instrumental music.

When the option \embeddedCode{useUnpitchedAudio} is set, an alternate
mode for un-pitched audio (e.g. percussion) is applied. Note that this
option introduces a power-gain of about 11dB in the filter, so beware
of output clipping; the option introduces noise in the shape of the
filter, i.e. peaking at the center frequency and settling around it.

%----------------------------------------------
\subsection{SOX Bandpass and Bandreject Filter}
%----------------------------------------------

\soxPanel{Bandpass}
\begin{parameterTable}
  \parameterTableLine{mode}
                     {selects between filter modes}
                     {bandpass / bandreject}
  \parameterTableLine{constantSkirtGain}
                     {flag to tell whether a constant skirt
                      gain is applied}
                     {Boolean}
  \parameterTableLine{frequency}
                     {the center frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth / slope}
\end{parameterTable}

By selecting the appropriate \embeddedCode{mode}, those effects are
either a two-pole Butterworth band-pass or band-reject filter with
\embeddedCode{frequency} as central frequency, and (3dB-point)
band-width given by \embeddedCode{bandWidth} and
\embeddedCode{bandwidthKind}. The \embeddedCode{constantSkirtGain}
option applies only to a bandpass and selects a constant skirt gain
(peak gain = Q) instead of the default, which is a constant 0dB peak
gain.  The filters roll off at 6dB per octave (20dB per decade).

The detailed filter description can be found in
\cite{reference:filter-cookbook}.

%--------------------------------------
\subsection{SOX Bass and Treble Filter}
%--------------------------------------

\soxPanel{Treble}
\begin{parameterTable}
  \parameterTableLine{mode}
                     {selects between filter modes}
                     {bass / treble}
  \parameterTableLine{gain}
                     {gain of filter at 0Hz (for bass) or 22kHz
                      (for treble)}
                     {dB}
  \parameterTableLine{frequency}
                     {the center frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth}
\end{parameterTable}

By selecting the appropriate \embeddedCode{mode}, this effect boosts
or cuts either the bass (lower) or treble (upper) frequencies of the
audio using a two-pole shelving filter with a response similar to that
of a standard hi-fi's tone-controls.  This is also known as shelving
equalisation (EQ).

The parameters are as follows:
\begin{itemize}

  \item \embeddedCode{gain} gives the gain at 0Hz (for bass), or
    whichever is the lower of 22kHz and the Nyquist frequency (for
    treble).  Its useful range is about -20 (for a large cut) to +20
    (for a large boost).  Beware of clipping when using a positive
    gain.

  \item \embeddedCode{frequency} sets the filter's central frequency
    and can be used to extend or reduce the frequency range to be
    boosted or cut.

  \item The band-width given by parameters \embeddedCode{bandWidth}
    and \embeddedCode{bandwidthKind} determines how steep is the
    filter's shelf transition.  In addition to the common width
    specification methods described above, ``slope'' may be used.  The
    useful range of slope is about 0.3, for a gentle slope, to 1 (the
    maximum), for a steep slope.

\end{itemize}

The detailed filter description can be found in
\cite{reference:filter-cookbook}.

%-----------------------------
\subsection{SOX Biquad Filter}
%-----------------------------

\soxPanel{Biquad}
\begin{parameterTable}
  \parameterTableLine{b0}{coefficient for \(x_{n}\)}{---}
  \parameterTableLine{b1}{coefficient for \(x_{n-1}\)}{---}
  \parameterTableLine{b2}{coefficient for \(x_{n-2}\)}{---}
  \parameterTableLine{a0}{coefficient for \(y_{n}\)}{---}
  \parameterTableLine{a1}{coefficient for \(y_{n-1}\)}{---}
  \parameterTableLine{a2}{coefficient for \(y_{n-2}\)}{---}
\end{parameterTable}

This effect is a biquad IIR filter with the given coefficients (see
\cite{reference:digitalBiquadFilter}).  It implements the (direct
form) function

   \[y_n = \sum_{i=0}^{2}b_ix_{n-i} - \sum_{i=1}^{2}a_iy_{n-i}\]

and is the basis for the other biquad filters (like e.g. the ``SOX
Equalizer'').
   
%-----------------------------
\subsection{SOX Compand}
\label{section:effect-compand}
%-----------------------------

\soxPanel{Compand}
\begin{parameterTable}
  \parameterTableLine{attack}
                     {the attack time of the compander}
                     {s}
  \parameterTableLine{decay}
                     {the decay time of the compander}
                     {s}
  \parameterTableLine{knee}
                     {the rounding of the corners in the
                      transfer function}
                     {dB}
  \parameterTableLine{threshold}
                     {the threshold of the compander}
                     {dBFS}
  \parameterTableLine{ratio}
                     {the compression factor of the compander}
                     {---}
  \parameterTableLine{gain}
                     {the compander gain before processing}
                     {dB}
\end{parameterTable}

This effect implements a compander to compress or expand the dynamic
range of the audio.

The parameters \embeddedCode{attack} and \embeddedCode{decay} (in
seconds) determine the time over which the instantaneous level of the
input signal is averaged to determine its volume; attacks refer to
increases in volume and decays refer to decreases. For most
situations, the attack time (response to the music getting louder)
should be shorter than the decay time because the human ear is more
sensitive to sudden loud music than sudden soft music.  Typical values
are 0.3s for attack and 0.8s for decay.

The transfer function of the compander is given by parameters
\embeddedCode{threshold}, \embeddedCode{ratio} and
\embeddedCode{knee}.  The compander leaves the original level
unchanged, when it is below threshold and compresses it by ratio
beyond this threshold.  So e.g. for a threshold of 20dBFS, a knee of
0dB and a ratio of 4:1 the transfer function is a graph shown in
figure~\ref{figure:transferFunction}.

\begin{centeredFigure}
  \centeredExternalPicture{1.0}{transferFunction.png}
  \caption{Example Transfer Function (Threshold 20dBFS, Ratio~4:1)}
  \label{figure:transferFunction}
\end{centeredFigure}

If the parameter \embeddedCode{knee} is greater than 0, the corner
points of the transfer function will be rounded by that amount.

The parameter \embeddedCode{gain} is an additional gain in dB to be
applied at all points on the transfer function and allows easy
adjustment of the overall gain.

\restriction{Only one overall pair of attack/decay parameters may be
  specified (where SOX allows one pair per channel).This is in
  principle supported by the effects engine of \JSFXSOX, but not
  supported in the current user interface.}
\restriction{The original SOX allows an arbitrary multi-segmented
  transfer function.  This is in principle supported by the effects
  engine of \JSFXSOX, but not supported in the current user
  interface.}
\restriction{There is no delay parameter for delayed compansion.}

%--------------------------------
\subsection{SOX Equalizer Filter}
%--------------------------------

\soxPanel{Equalizer}
\begin{parameterTable}
  \parameterTableLine{frequency}
                     {the 3dB point frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth}
\end{parameterTable}

This effect implements a two-pole peaking equalisation (EQ) filter.
With this filter, the signal-level at and around a selected frequency
can be increased or decreased, whilst (unlike band-pass and
band-reject filters) that at all other frequencies is unchanged.

The parameter \embeddedCode{frequency} gives the filter's central
frequency in Hz, parameters \embeddedCode{bandWidth} and
\embeddedCode{bandwidthKind} the bandwidth and \embeddedCode{gain} the
required gain or attenuation in decibels.  Beware of clipping when
using a positive gain.

The filter is described in detail in \cite{reference:filter-cookbook}.

%--------------------
\subsection{SOX Gain}
%--------------------

\soxPanel{Gain}
\begin{parameterTable}
  \parameterTableLine{gain}
                     {the amplification or attenuation factor}
                     {dB}
\end{parameterTable}

This effect is an amplifier or attenuator for the audio signal with a
single \embeddedCode{gain} parameter in decibels.  The gain factor
applies to all channels identically.

Nothing special, but note that the calculation is exact, hence a gain
of -6dB does \emph{not} halve the signal (but a gain of -6.0206dB
does quite well).

%-------------------------------------------
\subsection{SOX Highpass and Lowpass Filter}
%-------------------------------------------

\soxPanel{Highpass}
\begin{parameterTable}
  \parameterTableLine{mode}
                     {selects between filter modes}
                     {highpass / lowpass}
  \parameterTableLine{poles}
                     {selects between single and double pole filter}
                     {single/double}
  \parameterTableLine{frequency}
                     {the 3dB point frequency of the filter}
                     {Hz}
  \parameterTableLine{bandwidth}
                     {the bandwidth modulus of the filter}
                     {---}
  \parameterTableLine{bandwidthKind}
                     {the bandwidth unit of the filter}
                     {frequency / octaves / quality / butterworth}
\end{parameterTable}

By selecting the appropriate \embeddedCode{mode}, this effect is
either a high-pass or low-pass filter with a 3dB point
\embeddedCode{frequency}.  Depending on \embeddedCode{poles} the
filter can be either single-pole or double-pole.  The parameters
\embeddedCode{bandWidth} and \embeddedCode{bandwidthKind} apply only
to double-pole filters; a Butterworth response is given by butterworth
selection or by a q of 0.707.  The filters roll off at 6dB per pole
per octave (20dB per pole per decade).

The double-pole filters are described in detail in
\cite{reference:filter-cookbook}.

%------------------------
\subsection{SOX MCompand}
%------------------------

\soxPanel{MCompand}
\begin{parameterTable}
  \multicolumn{3}{|l|}{\cellcolor{parameterTableOtherBkgnd}
                       \bf for each band}\\\hline
  \parameterTableLine{attack}
                     {the attack time of the compander band}
                     {s}
  \parameterTableLine{decay}
                     {the decay time of the compander band}
                     {s}
  \parameterTableLine{knee}
                     {the rounding of the corners in the transfer
                      function}
                     {dB}
  \parameterTableLine{threshold}
                     {the threshold of the compander band}
                     {dBFS}
  \parameterTableLine{ratio}
                     {the compression factor of the compander band}
                     {---}
  \parameterTableLine{gain}
                     {the compander band gain before processing}
                     {dB}
  \parameterTableLine{topFrequency}
                     {the compander band top frequency (for all
                      but the last band)}
                     {Hz}
\end{parameterTable}

The multi-band compander is similar to the single-band compander but
the audio is first divided into bands using Linkwitz-Riley cross-over
filters and a separately specifiable compander run on each band (see
the compand effect in~\ref{section:effect-compand} for the definition
of its parameters).

\restriction{Only one overall pair of attack/decay parameters may be
  specified per band (where SOX allows one pair per channel).This is
  in principle supported by the effects engine of \JSFXSOX, but not
  supported in the current user interface.}
\restriction{The original SOX allows an arbitrary multi-segmented
  transfer function.  This is in principle supported by the effects
  engine of \JSFXSOX, but not supported in the current user
  interface.}
\restriction{There is no delay parameter for delayed compansion.}
\restriction{It is not possible to change the number of bands, but one
  has to select one of several multi-band companders with two to five
  bands.}

%-------------------------
\subsection{SOX Overdrive}
%-------------------------

\soxPanel{Overdrive}
\begin{parameterTable}
  \parameterTableLine{gain}
                     {the overdrive gain before processing}
                     {dB}
  \parameterTableLine{colour}
                     {the amount of even harmonic content in output}
                     {---}
\end{parameterTable}

This effect implements an tanh overdrive.  \embeddedCode{gain} gives
the input gain in decibels, The parameter \embeddedCode{colour}
controls the amount of even harmonic content in the over-driven
output.

%----------------------
\subsection{SOX Phaser}
%----------------------

\soxPanel{Phaser}
\begin{parameterTable}
  \parameterTableLine{inGain}
                     {the gain before processing}
                     {dB}
  \parameterTableLine{outGain}
                     {the gain applied after processing}
                     {dB}
  \parameterTableLine{delay}
                     {the predelay of the effect}
                     {ms}
  \parameterTableLine{decay}
                     {the decay factor of the phaser}
                     {---}
  \parameterTableLine{frequency}
                     {the phaser modulation frequency}
                     {Hz}
  \parameterTableLine{waveform}
                     {the modulation waveform}
                     {sine / triangle}
  \parameterTableLine{timeOffset}
                     {the point in project time where modulation is at
                      phase \degrees{0} (see \ref{section:timelocking})}
                     {s}
\end{parameterTable}

This effect implements a phaser effect to the audio.

\embeddedCode{inGain} is the amplification factor for the input in
decibels.  \embeddedCode{delay} gives the delay in milliseconds,
\embeddedCode{decay} a factor for the decay within the phaser and
\embeddedCode{frequency} gives the modulation frequency in Hz. The
\embeddedCode{waveform} of the modulation is either sinusoidal
—--~preferable for multiple instruments~--- or triangular —--~gives
single instruments a sharper phasing effect~---.
\embeddedCode{outGain} is the volume of the output.

The decay should be less than 0.5 to avoid feedback, and usually no
less than 0.1.

\embeddedCode{timeOffset} shows that this effect is time-locked.  For
details refer to section~\ref{section:timelocking}.

%----------------------
\subsection{SOX Reverb}
%----------------------

\soxPanel{Reverb}
\begin{parameterTable}
  \parameterTableLine{isWetOnly}
                     {tells whether only the wet signal should by produced}
                     {Boolean}
  \parameterTableLine{reverberance}
                     {percentage for reverb density}
                     {---}
  \parameterTableLine{hfDamping}
                     {percentage amount of damping of high frequencies
                      for each reflection relative to low frequencies}
                     {---}
  \parameterTableLine{roomScale}
                     {percentage for size of the room
                      (more precisely the reflectivity of the room)}
                     {---}
  \parameterTableLine{stereoDepth}
                     {percentage amount of stereo effect}
                     {---}
  \parameterTableLine{predelay}
                     {time offset until first reverb occurs}
                     {ms}
  \parameterTableLine{wetGain}
                     {gain of wet signal relative to dry signal}
                     {dB}
\end{parameterTable}

This effect implements reverberation of audio using the ``freeverb''
algorithm, which uses eight parallel Schröder-Moorer filtered-feedback
comb-filters followed by four Schröder allpasses in series.

Details on this algorithm can be found in \cite{reference:freeverb}.

%-----------------------
\subsection{SOX Tremolo}
%-----------------------

\soxPanel{Tremolo}
\begin{parameterTable}
  \parameterTableLine{frequency}
                     {the modulation frequency of the tremolo}
                     {Hz}
  \parameterTableLine{depth}
                     {percentage value for the intensity of modulation}
                     {---}
  \parameterTableLine{timeOffset}
                     {the point in project time where modulation is at
                      phase \degrees{0} (see \ref{section:timelocking})}
                     {s}
\end{parameterTable}

This effect implements a tremolo effect.  This tremolo is done by
signal multiplication; hence it is a low frequency double sideband
suppressed carrier modulation.  Parameter \embeddedCode{frequency}
gives the tremolo frequency, \embeddedCode{depth} gives the intensity
as a percentage.

\embeddedCode{timeOffset} shows that this effect is time-locked.  For
details refer to section~\ref{section:timelocking}.

%--------------------------
\subsection{Timelocking}
\label{section:timelocking}
%--------------------------

There are effects that behave differently in time, technically they
are \emph{time-variant}.  A filter does not care \emph{when} a signal
arrives, but a modulated effect like e.g. a phaser produces a
different sound for different start times because the modulation is
normally in another phase.

Hence when looking at the behaviour at a specific point in time, those
time-variant effects would behave differently when the effect start
time is varied.

E.g., assume a phaser with a 0.25Hz modulation (one cycle every 4s):
when you start the effect 1s later, its modulation is now off by
\degrees{90}.  This is not helpful when the effect now depends on
start time or loop positioning.

To circumvent this problem, all time variant effects from above
(phaser and tremolo) are \emph{time-locked} i.e. they check the
current play position and always behave the same at some specific
point in time regardless of the playback start time.

Additionally those effects have a parameter called
\embeddedCode{timeOffset}.  This parameter tells at what time the
effect has a phase of zero in its modulation.  The default is 0s,
but it may be adapted accordingly.

Take the phaser above and assume you want to make sure that its
modulation is exactly at \degrees{0} at position 155s within your
song\footnote{This is a little lie, because the inital phaser
  modulation phase is \degrees{90}, but the argument is still valid.}.
Then you just set \embeddedCode{timeOffset} to ``155''.  Because the
period of the modulation is 4s it is also okay to use \(155\pm4\cdot
k, k\in \N\) as offset (e.g. ``3''), but the above saves you from some
calculation for complicated modulation frequencies.

By this method even time-variant effects can be synced with
externally generated audio material.

%=============================
\section{Regression Test}
\label{section:regressionTest}
%=============================

To test that the plugins of \JSFXSOX\ really are bit-identical to sox,
a little test suite has been set up.

The suite assumes that sox is installed in the Windows search path.

If so, a simple batch script sets up raw audio test files and
---~externally via the command line~--- applies sox effects to them
producing audio result files.  The parameters used are a bit exotic to
ensure that algorithmic differences between sox and \JSFXSOX\ will
show up.  The batch script can be found in the \embeddedCode{test}
subdirectory and is called \embeddedCode{makeTestFiles.bat}

Additionally there is a Reaper project referencing those audio test
files and result files in autonomous tracks (see
figure~\ref{figure:regressionTestSetup}).  \JSFXSOX\ plugins are
configured with the exactly the same parameters as given in the batch
file and are correspondingly applied to the raw audio test files.

\begin{centeredFigure}
  \centeredExternalPicture{0.4}{regressionTest.png}
  \caption{Regression Test Setup in Reaper}
  \label{figure:regressionTestSetup}
\end{centeredFigure}

When subtracting the rendered audio in Reaper and the externally
rendered audio from sox, they (almost) cancel out.  This can be
checked by a spectrum analyser in the master channel, which is shown
in figure~\ref{figure:regressionTestNoiseFloor}.  It shows a noise
floor of typically less than -140dB.  This comes from the 24~bit
sample depth used in the FLAC files of the test suite; increasing that
sample depth would even lead to less residual noise.

\begin{centeredFigure}
  \centeredExternalPicture{0.5}{noiseFloor.png}
  \caption{Example Noise Floor for Regression Test in Reaper}
  \label{figure:regressionTestNoiseFloor}
\end{centeredFigure}

%===========================
\clearpage
\addcontentsline{toc}{section}{References}
\begin{thebibliography}{REAPLUGSXX}
%===========================

  \bibitem[DBIQFILT]{reference:digitalBiquadFilter}
    Wikipedia.\\
    \textit{Digital Biquad Filter.}\\
    \hyperlink{http://en.wikipedia.org/wiki/Digital\_biquad\_filter}

  \bibitem[FREEVERB]{reference:freeverb}
    J. O. Smith.\\
    \textit{Physical Audio Signal Processing.}\\
    W3K Publishing, 2010, ISBN 978-0-9745607-2-4.\\
    \hyperlink{https://ccrma.stanford.edu/\~jos/pasp/Freeverb.html}

  \bibitem[JSFXSOX]{reference:jsfxSoxRepository}
    Dr. Thomas Tensi.\\
    \textit{SOX Plugins for Reaper DAW in JSFX Language.}\\
    \hyperlink{https://github.com/prof-spock/JSFX-SOX-Plugins}

  \bibitem[REAPER]{reference:reaper}
    Cockos Incorporated.\\
    \textit{Reaper Digital Audio Workstation.}\\
    \hyperlink{https://www.reaper.fm/}

  \bibitem[REAPLUGS]{reference:reaplugs}
    Cockos Incorporated.\\
    \textit{ReaPlugs VST FX Suite.}\\
    \hyperlink{https://www.reaper.fm/reaplugs/}
    
  \bibitem[RBJFILT]{reference:filter-cookbook}
    R. Bristow-Johnson.\\
    \textit{Cookbook formulae for audio EQ biquad filter coefficients.}\\
    \hyperlink{https://www.w3.org/2011/audio/audio-eq-cookbook.html}

  \bibitem[SOXDOC]{reference:soxDocumentation}
    Chris Bagwell, Lance Norskog et al.\\
    \textit{SoX - Sound eXchange - Documentation}.\\
    \hyperlink{http://sox.sourceforge.net/Docs/Documentation}

\end{thebibliography}
\end{document}
