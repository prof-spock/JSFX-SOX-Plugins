desc: fixed array routines
// implements an array of fixed length where length is stored as first
// entry in array (for bounds checking and length information)
author: Dr. Thomas Tensi, 2019

//requires Base.jsfx-inc
//requires Base_memory.jsfx-inc

@init
    //========================================

    FixedArray_firstErrorCode = 999900;

    //--------------------

    function FixedArray_positionIsOkay (self, position)
        /** Checks whether <position> is in range of <self> */
    (
        0 < position && position <= self[0]
    );

    //--------------------

    function FixedArray_addressCHECKED (self, position)
        /** Gets address of element in <self> at <position> (with
            bounds checking) */
        local (result)
    (
        FixedArray_positionIsOkay(self, position) ? (
            result = ADDR(self, position);
        ) : (
            result = maximumInteger;
            signalError(FixedArray_firstErrorCode + 1);
        );

        result
    );

    //--------------------

    function FixedArray_addressFAST (self, position)
        /** Gets address of element in <self> at <position> (without
            bounds checking) */
    (
        self + position
    );

    //--------------------

    function FixedArray_getAtCHECKED (self, position)
        /** Gets element in <self> at <position> (with bounds
            checking) */
        local (result)
    (
        FixedArray_positionIsOkay(self, position) ? (
            result = self[position];
        ) : (
            result = 0;
            signalError(FixedArray_firstErrorCode + 2);
        );

        result
    );

    //--------------------

    function FixedArray_getAtFAST (self, position)
        /** Gets element in <self> at <position> (without bounds
            checking) */
    (
        self[position]
    );

    //--------------------

    function FixedArray_setAtCHECKED (self, position, value)
        /** Sets element in <self> at <position> to <value> (with
            bounds checking) */
    (
        FixedArray_positionIsOkay(self, position) ? (
            self[position] = value;
        ) : (
            signalError(FixedArray_firstErrorCode + 3);
        );
    );

    //--------------------

    function FixedArray_setAtFAST (self, position, value)
        /** Sets element in <self> at <position> to <value> (without
            bounds checking) */
    (
        self[position] = value;
    );

    //--------------------
    // EXPORTED ROUTINES
    //--------------------

    function FixedArray_make (length)
        /** Makes a fixed self with <length> elements */
        local (self)
    (
        // first entry contains the length, rest are the elements
        self = Memory_allocate(length + 1);
        self[0] = length;
        self
    );

    //--------------------

    function FixedArray_address (self, position)
        /** Gets address of element in <self> at <position> */
        local (result)
    (
        isCheckedMode ? (
            result = FixedArray_addressCHECKED(self, position);
        ) : (
            result = FixedArray_addressFAST(self, position);
        );

        result
    );

    //--------------------

    function FixedArray_fill (self, value)
        /** Fills <self> with entries of <value> */
    (
        Memory_set(self + 1, self[0], value);
    );

    //--------------------

    function FixedArray_clear (self)
        /** Clears <self> to zero entries */
    (
        FixedArray_fill(self, 0);
    );

    //--------------------

    function FixedArray_getAt (self, position)
        /** Gets element in <self> at <position> */
        local (result)
    (
        isCheckedMode ? (
            result = FixedArray_getAtCHECKED(self, position);
        ) : (
            result = FixedArray_getAtFAST(self, position);
        );

        result
    );

    //--------------------

    function FixedArray_length (self)
        /** Gets length of <self> */
    (
        self[0]
    );

    //--------------------

    function FixedArray_setAt (self, position, value)
        /** Sets element in <self> at <position> to <value> */
    (
        isCheckedMode ? (
            FixedArray_setAtCHECKED(self, position, value);
        ) : (
            FixedArray_setAtFAST(self, position, value);
        );
    );

    //========================================
