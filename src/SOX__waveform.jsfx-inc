desc: SOX wave form routines
author: Dr. Thomas Tensi, 2019

//requires Base.jsfx-inc
//requires Base_fixedarray.jsfx-inc

@init
    //========================================

    SOXWaveFormKind_sine     = 0;
    SOXWaveFormKind_triangle = 1;

    //--------------------

    function SOXWaveForm_fillBuffer (buffer, length, kind,
                                     minimumValue, maximumValue, phase,
                                     isInteger)
        /** Fills waveform <buffer> with <length> with a wave form
            given by <kind>; wave form has <minimumValue> and
            <maximumValue> as bounds; <phase> specifies the offset in
            the waveform and <isInteger> tells whether data has to be
            rounded to integer */
        local (delta i offsetByPhase quadrant x y)
    (
        delta = length / twoPi;
        offsetByPhase = round(phase * delta);
        i = 0;

        while (i < length) (
            x = mod(i + offsetByPhase, length);
            y = 0;
 
            kind == SOXWaveFormKind_sine ? (
                y = (sin(x / delta) + 1) / 2;
            ) : (
                y = x * 2 / length;
                quadrant = floor(4 * x / length);
                y = iif(quadrant == 0, y + 0.5,
                        quadrant == 3, y - 1.5,
                        1.5 - y);
            );

            y = y * (maximumValue - minimumValue) + minimumValue;
 
            isInteger ? (
                y = round(y);
            );

            i += 1;
            FixedArray_setAt(buffer, i, y);
        );
    );

    //--------------------

    function SOXWaveForm_adjustPhaseByTime (frequency, timeOffset,
                                            currentTime)
         /** Calculates time locked delta phase for position
             <currentTime> from <timeOffset> and <frequency> */
        local (deltaTime result)
    (
        deltaTime = currentTime - timeOffset;
        result = fractionalPart(deltaTime * frequency) * twoPi;
        result = modulo(result, twoPi);
        result
    );

    //========================================
