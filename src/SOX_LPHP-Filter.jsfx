desc: SOX Lowpass/Highpass Filter
tags: filter
author: Dr. Thomas Tensi, 2019

//--------------------
// IMPORTS
//--------------------

import Base.jsfx-inc
import Base_memory.jsfx-inc
import Base_integerset.jsfx-inc
import Base_string.jsfx-inc
import Base_fixedarray.jsfx-inc
import Base_display.jsfx-inc
import Base_debug.jsfx-inc

import SOX__base.jsfx-inc
import SOX__samplequeue.jsfx-inc
import SOX__iirfilter.jsfx-inc
import SOX__biquadfilter.jsfx-inc

//--------------------
// SLIDERS
//--------------------
slider1:mode=0<0,1,1{Highpass,Lowpass}>Mode
slider2:poles=0<0,1,1{Single,Double}>Poles
slider3:frequency=1000.0<10.0,20000.0,1>Frequency [Hz]
slider4:bandwidth=1.0<0.001,20000,0.00001>Bandwidth
slider5:bandwidthKind=0<0,3,1{Frequency,Octaves,Q,Butterworth}>Bandwidth Kind

//--------------------
// INITIALIZATION
//--------------------
@init
    //============================================================

    function SOXLpHp_Graphics_handleKey (key)
    (
        Graphics_currentMode == Graphics_Mode_effect ? (
            Graphics_clear(Graphics_Color_black);
        );
    );

    //============================================================

    SOXLpHp_highPassFilter = 0;
    SOXLpHp_singlePole = 0;

//--------------------
// SLIDER CHANGE
//--------------------
@slider
    // coefficients for biquad transform
    w0 = twoPi * frequency / srate;
    alpha =
        SOXBiquadFilter_alphaForBandwidth(bandwidth, bandwidthKind,
                                          frequency, 0);

    poles == SOXLpHp_singlePole ? (
        mode == SOXLpHp_highPassFilter ? (
            // highpass
            factorA = -1;
            factorB = 0.5;
            factorC = -1;
        ) : (
            // lowpass
            factorA = 1;
            factorB = 1;
            factorC = 0;
        );

        a0 = 1;
        a1 = -exp(-w0);
        a2 = 0;
        b0  = (1 + factorA * a1) * factorB;
        b1  = factorC * b0;
        b2  = 0;
    ) : (
        mode == SOXLpHp_highPassFilter ? (
            // highpass
            factorA = (1 + cos(w0));
            factorB = -1;
        ) : (
            // lowpass
            factorA = (1 - cos(w0));
            factorB = 1;
        );

        b0  = factorA / 2.0;
        b1  = factorB * factorA;
        b2  = b0;
        a0 = 1 + alpha;
        a1 = -2 * cos(w0);
        a2 = 1 - alpha;
    );

    SOXBiquadFilter_init(filter, b0, b1, b2, a0, a1, a2);
    Debug_clear();
    SOXBiquadFilter_print(filter);

//--------------------
// GRAPHICS
//--------------------
@gfx
    key = gfx_getchar();
    key = Graphics_MTSMatrix_handleKey(key);
    SOXLpHp_Graphics_handleKey(key);
