desc: SOX compander transfer function routines
author: Dr. Thomas Tensi, 2019

//requires Base.jsfx-inc
//requires Base_memory.jsfx-inc

@init
    //========================================
    // 2D Point Type
    //========================================

    Point_SIZE = 2;
    Point_x = 0;
    Point_y = 1;

    //--------------------

    function Point_make ()
        /** Returns a new point */
        local (self)
    (
        self = Memory_allocate(Point_SIZE);
        self
    );

    //--------------------

    function Point_destroy (self)
        /** Destroys <self> */
    (
        Memory_free(self);
    );

    //--------------------
    //--------------------

    function Point_add (self, otherPoint)
        /** Adds <otherPoint> to <self> */
    (
        self[Point_x] += otherPoint[Point_x];
        self[Point_y] += otherPoint[Point_y];
    );

    //--------------------

    function Point_clear (self)
        /** Sets <self> to (0, 0) */
    (
        self[Point_x] = 0;
        self[Point_y] = 0;
    );

    //--------------------

    function Point_copy (self, otherPoint)
        /** copies <otherPoint> to <self> */
    (
        memcpy(self, otherPoint, Point_SIZE)
    );

    //--------------------

    function Point_distance (self, otherPoint)
        /** returns the euklidian distance between <self> and
            <otherPoint> */
    (
        sqrt(sqr(self[Point_x] - otherPoint[Point_x])
             + sqr(self[Point_y] - otherPoint[Point_y]))
    );

    //--------------------

    function Point_scale (self, factor)
        /** scales <self> by <factor> */
    (
        self[Point_x] *= factor;
        self[Point_y] *= factor;
    );

    //--------------------

    function Point_subtract (self, otherPoint)
        /** subtracts <otherPoint> from <point> */
    (
        self[Point_x] -= otherPoint[Point_x];
        self[Point_y] -= otherPoint[Point_y];
    );

    //========================================
    // Segment Type (of Transfer Function)
    //========================================

    SOXTfSegment_SIZE = 7;

    SOXTfSegment_isStraightLine = 0;
    SOXTfSegment_startX         = 1;
    SOXTfSegment_startY         = 2;
    SOXTfSegment_endX           = 3;
    SOXTfSegment_endY           = 4;
    SOXTfSegment_a2             = 5;
    SOXTfSegment_a1             = 6;
    SOXTfSegment_start          = SOXTfSegment_startX;
    SOXTfSegment_end            = SOXTfSegment_endX;

    //--------------------

    function SOXTfSegment_contains (self, x)
        /** tells whether <x> lies in <self> */
    (
        self[SOXTfSegment_startX] <= x && x <= self[SOXTfSegment_endX]
    );

    //--------------------

    function SOXTfSegment_gradient (self)
        /** returns gradient of <self> */
    (
        (self[SOXTfSegment_endY] - self[SOXTfSegment_startY])
        / (self[SOXTfSegment_endX] - self[SOXTfSegment_startX])
    );

    //--------------------

    function SOXTfSegment_length (self)
        /** returns the length of <self> */
    (
        Point_distance(ADDR(self, SOXTfSegment_start),
                       ADDR(self, SOXTfSegment_end))
    );

    //--------------------

    function SOXTfSegment_adaptCoefficients (self, point)
        /** adapts coefficients of <self> such that <point> as well as
            start and end points are covered by a quadratic function */
        local(a1 a2 inA inB outA outB)
    (
        SOXTfSegment_length(self) == 0 ? (
            a1 = 0;
            a2 = 0;
        ) : (
            inA  = point[Point_x] - self[SOXTfSegment_startX];
            outA = point[Point_y] - self[SOXTfSegment_startY];
            inB  = self[SOXTfSegment_endX] - self[SOXTfSegment_startX];
            outB = self[SOXTfSegment_endY] - self[SOXTfSegment_startY];
            a2 = (outB / inB - outA / inA) / (inB - inA);
            a1 = outA / inA - a2 * inA;
        );

        self[SOXTfSegment_a1] = a1;
        self[SOXTfSegment_a2] = a2;
    );

    //--------------------

    function SOXTfSegment_interpolate (self, position, point)
        /** sets <point> to intermediate point at <position> along line
            within <self> */
        local(length relativePosition segmentStartPoint)
    (
        length = SOXTfSegment_length(self);

        length == 0 ? (
            relativePosition = 0;
        ) : (
            relativePosition = position / length;
        );

        segmentStartPoint = ADDR(self, SOXTfSegment_start);
        Point_copy(point, ADDR(self, SOXTfSegment_end));
        Point_subtract(point, segmentStartPoint);
        Point_scale(point, relativePosition);
        Point_add(point, segmentStartPoint);
    );


    //--------------------

    function SOXTfSegment_print (self)
         /** Prints <self> data to debug output */
    (
        Debug_printValue("isLine", self[SOXTfSegment_isStraightLine]);
        Debug_printValue("startX", self[SOXTfSegment_startX]);
        Debug_printValue("startY", self[SOXTfSegment_startY]);
        Debug_printValue("endX",   self[SOXTfSegment_endX]);
        Debug_printValue("endY",   self[SOXTfSegment_endY]);
        Debug_printValue("a2",     self[SOXTfSegment_a2]);
        Debug_printValue("a1",     self[SOXTfSegment_a1]);
    );

    //========================================
    // Transfer Function Type
    //========================================

    /** initial offset of first segment relative to threshold point */
    SOXTransferFunction_leftDbOffset = 10;

    SOXTransferFunction_SIZE = 6;
    SOXTransferFunction_segmentCount          = 0;
    SOXTransferFunction_segmentList           = 1;
    SOXTransferFunction_minimumLinearInValue  = 2;
    SOXTransferFunction_minimumLinearOutValue = 3;
    SOXTransferFunction_dBGain                = 4;
    SOXTransferFunction_dBKnee                = 5;

    //--------------------

    function _SOXTransferFunction_adaptCurvesInSegmentList (segmentList,
                                                            segmentCount,
                                                            dBKnee)
        /** Adapts curve segments in SOX compander transfer function in
            <segmentList> with <segmentCount> by the <dBKnee> value */
        local(currentSegmentStart i intermediatePoint length nextSegment
              nextSegmentStart position previousSegment radius segment
              targetPoint)
    (                                       
        radius = dbKnee * ln(10) / 20;

        i = 0;
        segment = null;
        nextSegment = ARRAYADDR(segmentList, 0, SOXTfSegment_SIZE);
        intermediatePoint = Point_make();

        while (i < segmentCount) (
            previousSegment = segment;
            segment         = nextSegment;
            nextSegment     = ARRAYADDR(segmentList, i + 1,
                                        SOXTfSegment_SIZE);

            !segment[SOXTfSegment_isStraightLine] ? (
                currentSegmentStart = ADDR(segment, SOXTfSegment_start);
                nextSegmentStart = ADDR(nextSegment, SOXTfSegment_start);

                // adapt curve segment to the left
                length = SOXTfSegment_length(previousSegment);
                position = max(0, length - radius);
                targetPoint = currentSegmentStart;
                SOXTfSegment_interpolate(previousSegment, position,
		                         targetPoint);
                Point_copy(ADDR(previousSegment, SOXTfSegment_end),
                           targetPoint);

                // adapt curve segment to the right
                length = SOXTfSegment_length(nextSegment);
                position = min(radius, length / 2);
                targetPoint = ADDR(segment, SOXTfSegment_end);
                SOXTfSegment_interpolate(nextSegment, position, targetPoint);

                // find some intermediate point
                Point_copy(intermediatePoint, currentSegmentStart);
                Point_add(intermediatePoint,  targetPoint);
                Point_add(intermediatePoint,  nextSegmentStart);
                Point_scale(intermediatePoint, 1/3);

                Point_copy(nextSegmentStart,  targetPoint);

                // set coefficients of curve
                SOXTfSegment_adaptCoefficients(segment, intermediatePoint);
            );

            i += 1;
        );

        Point_destroy(intermediatePoint);
    );

    //--------------------

    function _SOXTransferFunction_shiftScaleSegmentList (segmentList,
                                                         segmentCount,
                                                         dBGain)
        /** Adapts values of SOX compander transfer function segments
            in <segmentList> with <segmentCount> by <dBGain> and
            makes values natural logarithms */
        local(factor i segment)
    (
        factor = ln(10) / 20;
        i = 0;

        while (i < segmentCount) (
            segment = ARRAYADDR(segmentList, i, SOXTfSegment_SIZE);
            segment[SOXTfSegment_startY] += dBGain;
            segment[SOXTfSegment_endY]   += dBGain;
            Point_scale(ADDR(segment, SOXTfSegment_startX), factor);
            Point_scale(ADDR(segment, SOXTfSegment_endX), factor);

            segment[SOXTfSegment_isStraightLine] ? (
                segment[SOXTfSegment_a2] = 0;
                segment[SOXTfSegment_a1] = SOXTfSegment_gradient(segment);
            );

            i += 1;
        );
    );

    //--------------------

    function _SOXTransferFunction_updateSegmentListEnds (segmentList,
                                                         segmentCount)
        /** adapts start values and kinds of SOX compander transfer
            segments in <segmentList> with <segmentCount> */
        local(endPoint i nextSegment segment startPoint)
    (
        i = segmentCount - 2;

        while (i >= 0) (
            segment = ARRAYADDR(segmentList, i, SOXTfSegment_SIZE);
            nextSegment = ARRAYADDR(segmentList, i + 1, SOXTfSegment_SIZE);

            startPoint = ADDR(nextSegment, SOXTfSegment_start);
            endPoint   = ADDR(segment, SOXTfSegment_end);
            Point_copy(endPoint, startPoint);
            i -= 1;
        );
    );

    //--------------------

    function _SOXTransferFunction_updateSegmentListKinds (segmentList,
                                                          segmentCount)
        /** adapts start values and kinds of SOX compander transfer
            segments in <segmentList> with <segmentCount> */
        local(i isStraightLine nextSegment segment)
    (
        i = segmentCount - 1;

        while (i >= 0) (
            segment = ARRAYADDR(segmentList, i, SOXTfSegment_SIZE);
            isStraightLine = ((i & 1) == 0);
            segment[SOXTfSegment_isStraightLine] = isStraightLine;

            !isStraightLine ? (
                nextSegment = ARRAYADDR(segmentList, i + 1, SOXTfSegment_SIZE);
                Point_copy(ADDR(segment, SOXTfSegment_start),
                           ADDR(nextSegment, SOXTfSegment_start));
            );

            i -= 1;
        );
    );

    //--------------------

    function _SOXTransferFunction_updateSegmentList (self)
        /** adapts values of SOX compander transfer segments */
        local (dBGain dBKnee outGain segmentCount segmentList)
    (
        dBKnee       = self[SOXTransferFunction_dBKnee];
        dBGain       = self[SOXTransferFunction_dBGain];
        segmentCount = self[SOXTransferFunction_segmentCount];
        segmentList  = self[SOXTransferFunction_segmentList];

        // pass 1: fill all segments with kind and start values
        _SOXTransferFunction_updateSegmentListKinds(segmentList, segmentCount);

        // pass 2: fill all segments with end values and gradient
        //         for the straight lines
        _SOXTransferFunction_updateSegmentListEnds(segmentList, segmentCount);

        // pass 3: adapt transfer function by output gain and make
        //         values natural logarithms
        _SOXTransferFunction_shiftScaleSegmentList(segmentList, segmentCount,
                                                   dBGain);

        // pass 4: adapt transfer function knees
        _SOXTransferFunction_adaptCurvesInSegmentList(segmentList,
                                                      segmentCount,
                                                      dBKnee);
    );

    //--------------------
    // PUBLIC FUNCTIONS
    //--------------------

    function SOXTransferFunction_init (self)
        /** initializes SOX compander transfer function <self> */
        local (segmentCount segmentList)
    (
        segmentCount = 3;
        segmentList = Memory_allocateArray(segmentCount, SOXTfSegment_SIZE);

        self[SOXTransferFunction_segmentCount]          = segmentCount;
        self[SOXTransferFunction_segmentList]           = segmentList;
        self[SOXTransferFunction_minimumLinearInValue]  = 1;
        self[SOXTransferFunction_minimumLinearOutValue] = 1;
        self[SOXTransferFunction_dBGain]                = 0;
        self[SOXTransferFunction_dBKnee]                = 0.01;
    );

    //--------------------

    function SOXTransferFunction_make ()
        /** creates SOX compander transfer function and initializes it */
        local (self)
    (
        self = Memory_allocate(SOXTransferFunction_SIZE);
        SOXTransferFunction_init(self);
        self
    );

    //--------------------

    function SOXTransferFunction_adapt (self,
                                        dBKnee, dBThreshold, ratio, dBGain)
        /** adapts values of SOX compander transfer function <self> */
        local(firstSegment i segment segmentList)
    (
        ratio  = max(1, ratio);
        dBKnee = max(dBKnee, 0);
        dBThreshold = min(0, dBThreshold);

        self[SOXTransferFunction_dBGain] = dBGain;
        self[SOXTransferFunction_dBKnee] = dBKnee;

        // set data for the straight segments
        segmentList = self[SOXTransferFunction_segmentList];

        segment = ARRAYADDR(segmentList, 0, SOXTfSegment_SIZE);
        segment[SOXTfSegment_startX] =
            (dBThreshold - SOXTransferFunction_leftDbOffset);
        segment[SOXTfSegment_startY] = 0;

        segment = ARRAYADDR(segmentList, 2, SOXTfSegment_SIZE);
        segment[SOXTfSegment_startX] = dBThreshold;
        segment[SOXTfSegment_startY] = 0;
        segment[SOXTfSegment_endX]   = 0;
        segment[SOXTfSegment_endY]   = (ratio - 1) * dBThreshold / ratio;

        _SOXTransferFunction_updateSegmentList(self);

        firstSegment = ARRAYADDR(segmentList, 1, SOXTfSegment_SIZE);
        self[SOXTransferFunction_minimumLinearInValue] =
            exp(firstSegment[SOXTfSegment_startX]);
        self[SOXTransferFunction_minimumLinearOutValue] =
            exp(firstSegment[SOXTfSegment_startY]);
    );

    //--------------------

    function SOXTransferFunction_apply (self, value)
        /** Applies transfer function <self> to <value> */
        local(a1 a2 lnValue lnResult result y)
    (
        value <= self[SOXTransferFunction_minimumLinearInValue] ? (
            result = self[SOXTransferFunction_minimumLinearOutValue];
        ) : (
            value = min(value, 1);
            lnValue = ln(value);
            segment = self[SOXTransferFunction_segmentList];
            segmentCount = self[SOXTransferFunction_segmentCount];

            while (!SOXTfSegment_contains(segment, lnValue)) (
                segment += SOXTfSegment_SIZE;
            );

            lnValue -= segment[SOXTfSegment_startX];
            a1 = segment[SOXTfSegment_a1];
            a2 = segment[SOXTfSegment_a2];
            y  = segment[SOXTfSegment_startY];
            lnResult = y + lnValue * (a2 * lnValue + a1);
            result = exp(lnResult);
        );

        result
    );

    //--------------------

    function SOXTransferFunction_print (self)
         /** Prints transfer function <self> to debug output */
        local (segment segmentIndex segmentList)
    (
        Debug_printLine("- TransferFct -", Debug_headingColor1);
        Debug_printValue("tfMinLin",
	                     self[SOXTransferFunction_minimumLinearInValue]);
        Debug_printValue("tfMinOut",
	                     self[SOXTransferFunction_minimumLinearOutValue]);
        Debug_printValue("tfGain",   self[SOXTransferFunction_dBGain]);
        Debug_printValue("tfKnee",   self[SOXTransferFunction_dBKnee]);
        Debug_printValue("tfSegCnt", self[SOXTransferFunction_segmentCount]);

        segmentList = self[SOXTransferFunction_segmentList];
        segmentIndex = 0;

        while (segmentIndex < self[SOXTransferFunction_segmentCount]) (
            Debug_printValue("[H2]Segm.Nr.", segmentIndex);
            segment = ARRAYADDR(segmentList, segmentIndex,
                                SOXTfSegment_SIZE);
            SOXTfSegment_print(segment);
            segmentIndex += 1;
        );
    );

    //========================================
